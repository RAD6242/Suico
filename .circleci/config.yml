version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@2.0
jobs:
  build:
    docker:
      - image: cimg/ruby:3.0.3-node
        environment:
          BUNDLER_VERSION: 2.2.32
          RAILS_ENV: test
          DB_HOST: '127.0.0.1'
          DB_USERNAME: 'root'
          DB_PASSWORD: 'password'

      - image: cimg/mysql:8.0
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
          MYSQL_ROOT_HOST: '%'

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/repo/api/Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem install bundler
            bundle config sert path 'vendor/bundle'
            bundle install --jobs=4 --retry=3
          working_directory: ~/repo/api
      
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 3m

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "~/repo/api/Gemfile.lock" }}

      - run:
          command: mv config/database.yml.ci config/database.yml
          working_directory: ~/repo/api

      - run:
          command: bundle exec rails db:create
          working_directory: ~/repo/api

      - run:
          command: bundle exec rake db:schema:load
          working_directory: ~/repo/api

      - run:
          name: Rubocop
          command: bundle exec rubocop
          working_directory: ~/repo/api

      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES
          working_directory: ~/repo/api

      # correct reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
  # run-task:
  #   docker:
  #     - image: 'cimg/python:3.9.1'
  #   steps:
  #     - aws-ecs/run-task:
  #         cluster: 'sample-ecs-cluster'
  #         task-definition: 'sample-migration-task'
  #         security-group-ids: $AWS_SECURITY_GROUP
  #         subnet-ids: '$AWS_SUBNET_ONE, $AWS_SUBNET_TWO'
  #         awsvpc: true
  #         launch-type: EC2
workflows:
    version: 2
    test:
      jobs:
        - build
        - aws-ecr/build-and-push-image:
            requires:
                - build
            region: AWS_REGION
            account-url: AWS_ECR_ACCOUNT_URL
            repo: 'sample-image'
            # tag: "${CIRCLE_SHA1}"
            tag: "latest"
            dockerfile: 'Dockerfile.production'
            path: 'api'
            filters:
                branches:
                    only:
                        - main
        - aws-ecs/deploy-service-update:
            requires:
              - aws-ecr/build-and-push-image
            family: 'webapp-service'
            cluster-name: 'sample-ecs-cluster'
            service-name: 'webapp-service'
            container-image-name-updates: 'container=sample-webapp,tag=${CICLE_SHA1}'
            filters:
                branches:
                    only:
                        - main
        - aws-ecs/run-task:
            cluster: 'sample-ecs-cluster'
            task-definition: 'webapp-service-migration'
            awsvpc: false
            launch-type: EC2
            requires:
              - aws-ecs/deploy-service-update


version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@2.0
jobs:
  build:
    docker:
      - image: cimg/ruby:3.0.3-node
        environment:
          BUNDLER_VERSION: 2.2.32
          RAILS_ENV: test
          DB_HOST: '127.0.0.1'
          DB_USERNAME: 'root'
          DB_PASSWORD: 'password'

      - image: cimg/mysql:8.0
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
          MYSQL_ROOT_HOST: '%'

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/repo/api/Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem install bundler
            bundle config sert path 'vendor/bundle'
            bundle install --jobs=4 --retry=3
          working_directory: ~/repo/api
      
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 3m

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "~/repo/api/Gemfile.lock" }}

      - run:
          command: mv config/database.yml.ci config/database.yml
          working_directory: ~/repo/api

      - run:
          command: bundle exec rails db:create
          working_directory: ~/repo/api

      - run:
          command: bundle exec rake db:schema:load
          working_directory: ~/repo/api

      - run:
          name: Rubocop
          command: bundle exec rubocop
          working_directory: ~/repo/api

      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES
          working_directory: ~/repo/api

      # correct reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
  # run-task:
  #   docker:
  #     - image: 'cimg/python:3.9.1'
  #   steps:
  #     - aws-ecs/run-task:
  #         cluster: 'sample-ecs-cluster'
  #         task-definition: 'sample-migration-task'
  #         security-group-ids: $AWS_SECURITY_GROUP
  #         subnet-ids: '$AWS_SUBNET_ONE, $AWS_SUBNET_TWO'
  #         awsvpc: true
  #         launch-type: EC2
workflows:
    version: 2
    test:
      jobs:
        - build
        - aws-ecr/build-and-push-image:
            requires:
                - build
            region: AWS_REGION
            account-url: AWS_ECR_ACCOUNT_URL
            repo: 'sample-image'
            # tag: "${CIRCLE_SHA1}"
            tag: "latest"
            dockerfile: 'Dockerfile.production'
            path: 'api'
            filters:
                branches:
                    only:
                        - main
        - aws-ecs/deploy-service-update:
            requires:
              - aws-ecr/build-and-push-image
            family: 'webapp-service'
            cluster-name: 'sample-ecs-cluster'
            service-name: 'webapp-service'
            container-image-name-updates: 'container=sample-webapp,tag=${CICLE_SHA1}'
            filters:
                branches:
                    only:
                        - main
        - aws-ecs/run-task:
            cluster: 'sample-ecs-cluster'
            task-definition: 'webapp-service-migration'
            awsvpc: false
            launch-type: EC2
            requires:
              - aws-ecs/deploy-service-update
